

@page "/Piano"
<PageTitle>Piano</PageTitle>
<script src="lib/bootstrap/dist/js/piano.js"></script>


<h1>Virtual Piano</h1>

<div class="piano-keys" style="display: flex;">
    @for (int i = 0; i < Notes.Length; i++)
    {
        var note = Notes[i];
        var key = NoteToKey.FirstOrDefault(x => x.Value == note).Key;
        bool isPressed = PressedNote == note;
        <button class="piano-key @(isPressed ? "pressed" : null)" 
                style="width:40px;height:180px;margin:1px;background:@(IsSharp(note) ? (isPressed ? "#666" : "#333") : (isPressed ? "#ccf" : "#fff"));color:@(IsSharp(note) ? "#fff" : "#000");border:2px solid @(isPressed ? "#00f" : "#000");z-index:@(IsSharp(note) ? 2 : 1);position:relative;top:@(IsSharp(note) ? 0 : 20)px;transition:background 0.1s,border 0.1s;" 
                @onclick="() => PlayNote(note)" 
                @onmousedown="() => SetPressed(note)" 
                @onmouseup="() => SetPressed(null)" 
                @onmouseleave="() => SetPressed(null)">
            <span style="position:absolute;top:50%;left:0;right:0;transform:translateY(-50%);text-align:center;width:100%;pointer-events:none;font-weight:bold;">@note</span>
            @if (NoteToKey.TryGetValue(note, out var mappedKey) && !string.IsNullOrEmpty(mappedKey))
            {
                <span style="position:absolute;bottom:6px;right:6px;font-size:0.8em;opacity:0.7;pointer-events:none;">@mappedKey.ToUpper()</span>
            }
        </button>
    }
</div>


<audio id="audio" />

@code {

    private string[] Notes = new[] { "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "C2" };

    // Keyboard mapping: white keys and black keys
    private readonly Dictionary<string, string> KeyToNote = new()
    {
        { "a", "C" }, { "w", "C#" }, { "s", "D" }, { "e", "D#" }, { "d", "E" }, { "f", "F" }, { "t", "F#" },
        { "g", "G" }, { "y", "G#" }, { "h", "A" }, { "u", "A#" }, { "j", "B" }, { "k", "C2" }
    };
    private readonly Dictionary<string, string> NoteToKey;

    private string? PressedNote = null;

    private bool IsSharp(string note) => note.Contains("#");

    private async Task PlayNote(string note)
    {
        SetPressed(note);
        await JS.InvokeVoidAsync("playPianoNote", note);
        await Task.Delay(120);
        SetPressed(null);
    }

    private void SetPressed(string? note)
    {
        PressedNote = note;
        StateHasChanged();
    }

    [Inject] IJSRuntime JS { get; set; }

    public Piano()
    {
        // Reverse mapping for showing key on button
        NoteToKey = KeyToNote.ToDictionary(x => x.Value, x => x.Key);
    }

    [JSInvokable]
    public void SetPressedFromJs(string note)
    {
        SetPressed(note);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JS.InvokeVoidAsync("pianoWireUpKeys", DotNetObjectReference.Create(this));
        }
    }
}
